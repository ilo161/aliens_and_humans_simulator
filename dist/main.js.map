{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/util.js","webpack:///./src/scripts/progressBar.js","webpack:///./src/images/h_progress_bars/H_BarBackground.png","webpack:///./src/images/v_progress_bars/V_BarBackground.png","webpack:///./src/images/h_progress_bars/H_BlueBar.png","webpack:///./src/images/h_progress_bars/H_GreenBar.png","webpack:///./src/images/h_progress_bars/H_RedBar.png","webpack:///./src/images/h_progress_bars/H_YellowBar.png","webpack:///./src/images/v_progress_bars/V_BlueBar10.png","webpack:///./src/images/v_progress_bars/V_BlueBar20.png","webpack:///./src/images/v_progress_bars/V_BlueBar30.png","webpack:///./src/images/v_progress_bars/V_BlueBar40.png","webpack:///./src/images/v_progress_bars/V_BlueBar50.png","webpack:///./src/images/v_progress_bars/V_BlueBar60.png","webpack:///./src/images/v_progress_bars/V_BlueBar70.png","webpack:///./src/images/v_progress_bars/V_BlueBar80.png","webpack:///./src/images/v_progress_bars/V_BlueBar90.png","webpack:///./src/images/v_progress_bars/V_BlueBar100.png","webpack:///./src/images/v_progress_bars/V_GreenBar10.png","webpack:///./src/images/v_progress_bars/V_GreenBar20.png","webpack:///./src/images/v_progress_bars/V_GreenBar30.png","webpack:///./src/images/v_progress_bars/V_GreenBar40.png","webpack:///./src/images/v_progress_bars/V_GreenBar50.png","webpack:///./src/images/v_progress_bars/V_GreenBar60.png","webpack:///./src/images/v_progress_bars/V_GreenBar70.png","webpack:///./src/images/v_progress_bars/V_GreenBar80.png","webpack:///./src/images/v_progress_bars/V_GreenBar90.png","webpack:///./src/images/v_progress_bars/V_GreenBar100.png","webpack:///./src/scripts/pointsSystem.js","webpack:///./src/scripts/allSprites.js","webpack:///./src/images/community/pyramids/00red_pyramid.png","webpack:///./src/images/community/pyramids/01golden_pyramid.png","webpack:///./src/images/community/pyramids/02light_pyramid.png","webpack:///./src/images/production/houses/00shack.png","webpack:///./src/images/production/houses/01butcher.png","webpack:///./src/images/production/houses/02house.png","webpack:///./src/scripts/canvas_events.js","webpack:///./src/images/terrain_grass/grass_mix_d.jpg","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","buildAssetPath","imgSrc","progressBar","context","startX","startY","color","orientation","this","points","blankSprite","undefined","colorSprite","loadSrc","backgroundSrc","orientationAndCreate","Image","src","that","onload","e","drawImage","colorBarSrc","selectColor","ori","hColors","vColors","10","20","30","40","50","60","70","80","90","100","playerPoints","community","production","resources","adjustResources","num","drawResourcesText","canvas","width","clearRect","font","fillStyle","strokeStyle","fillText","strokeText","allSprites","console","log","currentGrid","grassSquare","onPlayerGrid","buildPlayerGrid","j","isPresent","cORp","klass","level","buildPlayerState","civilization","parks","pyramids","file","boost","index","ruins","meditationCircles","trees","farms","buildings","houses","energy","wind","solar","hydro","canvasEvents","canvasHome","menuContainer","document","getElementsByClassName","menu","playerAlert","addEventListener","getCoords","Array","from","classList","includes","toggle","len","options","length","setAttribute","removePlayerAlert","appendChild","generateErrorAlert","selectedIndex","choiceStr","verifyBuildingMatch","chosenBuilding","civilizationMenuSelect","filePathBuild","isGridOccupied","x","y","objAtGridPos","drawOnGrid","parseImage","occupyGrid","isInitialBuilding","fillPercentage","style","adjustPoints","nextcORp","nextKlass","nextIndex","optionsArr","split","parseInt","maxIndexOfType","childElementCount","removeChild","childNodes","errorMsg","ele","createElement","text","createTextNode","cx","cy","canvasRect","getBoundingClientRect","px","pageX","py","pageY","left","top","col","Math","floor","row","selected","filePath","image","gridX","gridY","clearRectBoolean","getElementById","getContext","img1","drawRow","rowX","rowY","drawGrass","setInterval"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const buildAssetPath = (imgSrc) => {\n    return `./dist/${imgSrc}`;\n}","import hBlank from \"../images/h_progress_bars/H_BarBackground.png\"\nimport hBlue from \"../images/h_progress_bars/H_BlueBar.png\"\nimport hGreen from \"../images/h_progress_bars/H_GreenBar.png\"\nimport hRed from \"../images/h_progress_bars/H_RedBar.png\"\nimport hYellow from \"../images/h_progress_bars/H_YellowBar.png\"\n\n\nimport vBlank from \"../images/v_progress_bars/V_BarBackground.png\"\nimport vBlue10 from \"../images/v_progress_bars/V_BlueBar10.png\"\nimport vBlue20 from \"../images/v_progress_bars/V_BlueBar20.png\"\nimport vBlue30 from \"../images/v_progress_bars/V_BlueBar30.png\"\nimport vBlue40 from \"../images/v_progress_bars/V_BlueBar40.png\"\nimport vBlue50 from \"../images/v_progress_bars/V_BlueBar50.png\"\nimport vBlue60 from \"../images/v_progress_bars/V_BlueBar60.png\"\nimport vBlue70 from \"../images/v_progress_bars/V_BlueBar70.png\"\nimport vBlue80 from \"../images/v_progress_bars/V_BlueBar80.png\"\nimport vBlue90 from \"../images/v_progress_bars/V_BlueBar90.png\"\nimport vBlue100 from \"../images/v_progress_bars/V_BlueBar100.png\"\n\nimport vGreen10 from \"../images/v_progress_bars/V_GreenBar10.png\"\nimport vGreen20 from \"../images/v_progress_bars/V_GreenBar20.png\"\nimport vGreen30 from \"../images/v_progress_bars/V_GreenBar30.png\"\nimport vGreen40 from \"../images/v_progress_bars/V_GreenBar40.png\"\nimport vGreen50 from \"../images/v_progress_bars/V_GreenBar50.png\"\nimport vGreen60 from \"../images/v_progress_bars/V_GreenBar60.png\"\nimport vGreen70 from \"../images/v_progress_bars/V_GreenBar70.png\"\nimport vGreen80 from \"../images/v_progress_bars/V_GreenBar80.png\"\nimport vGreen90 from \"../images/v_progress_bars/V_GreenBar90.png\"\nimport vGreen100 from \"../images/v_progress_bars/V_GreenBar100.png\"\n\n\nimport vGreen from \"../images/v_progress_bars/V_GreenBar100.png\"\n// import vRed from \"../images/v_progress_bars/V_RedBar.png\"\n// import vYellow from \"../images/v_progress_bars/V_YellowBar.png\"\nimport {buildAssetPath} from \"./util.js\"\n\n\nclass progressBar {\n    constructor(context, startX, startY, color, orientation, value){\n        this.context = context;\n        this.startX = startX;\n        this.startY = startY;\n        this.points = 30;\n        this.color = color;\n        this.value = value;\n        this.orientation = orientation\n\n        this.blankSprite = undefined;\n        this.colorSprite = undefined;\n\n        this.loadSrc(orientation)\n        \n        }\n\n    loadSrc(orientation){\n        if(this.color === \"blank\"){\n            const backgroundSrc = this.orientationAndCreate(orientation);\n            this.blankSprite = new Image();\n            this.blankSprite.src = backgroundSrc; \n            \n            const that = this;\n            this.blankSprite.onload = (e) => {\n            // debugger\n            // that.context.drawImage(that.blankSprite, that.startX, that.startY, 100, 364);\n            that.context.drawImage(that.blankSprite, that.startX, that.startY, 100, 378);\n            }\n        } else {\n            const colorBarSrc = this.selectColor(this.color, orientation, this.value)\n            this.colorSprite = new Image();\n            this.colorSprite.src = colorBarSrc; \n            // debugger\n            const that = this;\n            this.colorSprite.onload = (e) => {\n\n                // that.context.drawImage(that.colorSprite, that.startX, that.startY, 100, 278);\n                // 30 is good start\n                // that.context.drawImage(that.colorSprite, that.startX, that.startY, 100, 30);\n                // debugger\n                that.context.drawImage(that.colorSprite, that.startX, that.startY, 100, 400);\n            }\n\n        }\n        \n        \n        \n\n        \n       \n\n\n    }\n\n\n\n    // loadSrc(orientation){\n        \n    //     const backgroundSrc = this.orientationAndCreate(orientation);\n    //     const colorBarSrc = this.selectColor(this.color, orientation)\n        \n    //     this.blankSprite = new Image();\n    //     this.colorSprite = new Image();\n\n    //     this.blankSprite.src = backgroundSrc; \n    //     this.colorSprite.src = colorBarSrc; \n    //     const that = this;\n    //     this.blankSprite.onload = (e) => {\n    //         debugger\n    //         that.context.drawImage(that.blankSprite, that.startX, that.startY, 100, 100);\n    //         that.context.drawImage(that.colorSprite, that.startX, that.startY, 100, 100);\n    //     }\n\n\n    // }\n\n        \n        // select initial orientation of progress bar. Vertical or Horizontal.\n    orientationAndCreate(ori){\n        if(ori === \"h\" || ori === \"H\"){\n            // debugger\n            return buildAssetPath(hBlank)\n        } else if(ori ===\"v\" || ori === \"V\") {\n            // debugger\n            return buildAssetPath(vBlank)\n        }\n\n    }\n\n         // select color of progress bar vertical or horizontal\n    selectColor(color, ori, value){\n        let selected = undefined;\n\n        const hColors = {\n            \"blank\": buildAssetPath(hBlank),\n            \"blue\": buildAssetPath(hBlue),\n            \"green\": buildAssetPath(hGreen),\n            \"red\": buildAssetPath(hRed),\n            \"yellow\": buildAssetPath(hYellow)\n        }\n\n        const vColors = {\n            \"blank\": buildAssetPath(vBlank),\n            \"blue\": {10: buildAssetPath(vBlue10),\n                     20: buildAssetPath(vBlue20),\n                     30: buildAssetPath(vBlue30),\n                     40: buildAssetPath(vBlue40),\n                     50: buildAssetPath(vBlue50),\n                     60: buildAssetPath(vBlue60),\n                     70: buildAssetPath(vBlue70),\n                     80: buildAssetPath(vBlue80),\n                     90: buildAssetPath(vBlue90),\n                     100: buildAssetPath(vBlue100)\n            },\n            \"green\": {10: buildAssetPath(vGreen10),\n                     20: buildAssetPath(vGreen20),\n                     30: buildAssetPath(vGreen30),\n                     40: buildAssetPath(vGreen40),\n                     50: buildAssetPath(vGreen50),\n                     60: buildAssetPath(vGreen60),\n                     70: buildAssetPath(vGreen70),\n                     80: buildAssetPath(vGreen80),\n                     90: buildAssetPath(vGreen90),\n                     100: buildAssetPath(vGreen100)\n             }\n            }\n\n        if (ori === \"h\" || ori === \"H\"){\n            selected = hColors[color];\n\n            return selected;\n        }else if(ori ===\"v\" || ori === \"V\"){\n            selected = vColors[color][value];\n\n            return selected;\n        }\n\n    }\n    \n\n    increaseFill(value){\n        // this.context.drawImage(this.colorSprite, this.startX, this.startY, 22, 200)\n        // this.context.drawImage(this.colorSprite, this.startX, this.startY, 22, 200)\n        // else {\n            this.value = value\n            const colorBarSrc = this.selectColor(this.color, this.orientation, this.value)\n            // this.colorSprite = new Image();\n            this.colorSprite.src = colorBarSrc; \n            // debugger\n            const that = this;\n            this.colorSprite.onload = (e) => {\n\n                // that.context.drawImage(that.colorSprite, that.startX, that.startY, 100, 278);\n                // 30 is good start\n                // that.context.drawImage(that.colorSprite, that.startX, that.startY, 100, 30);\n                that.context.drawImage(that.colorSprite, that.startX, that.startY, 100, 400);\n            }\n\n        }\n    \n\n    decreaseFill(value){\n\n    }\n\n    resetFill(){\n\n    }\n\n    drawBar(context){\n        // context.drawImage()\n        context.drawImage(this.blankSprite, this.startX, this.startY, 100, 100);\n    }\n\n}\n\nexport default progressBar;\n\n","export default \"images/H_BarBackground.png\";","export default \"images/V_BarBackground.png\";","export default \"images/H_BlueBar.png\";","export default \"images/H_GreenBar.png\";","export default \"images/H_RedBar.png\";","export default \"images/H_YellowBar.png\";","export default \"images/V_BlueBar10.png\";","export default \"images/V_BlueBar20.png\";","export default \"images/V_BlueBar30.png\";","export default \"images/V_BlueBar40.png\";","export default \"images/V_BlueBar50.png\";","export default \"images/V_BlueBar60.png\";","export default \"images/V_BlueBar70.png\";","export default \"images/V_BlueBar80.png\";","export default \"images/V_BlueBar90.png\";","export default \"images/V_BlueBar100.png\";","export default \"images/V_GreenBar10.png\";","export default \"images/V_GreenBar20.png\";","export default \"images/V_GreenBar30.png\";","export default \"images/V_GreenBar40.png\";","export default \"images/V_GreenBar50.png\";","export default \"images/V_GreenBar60.png\";","export default \"images/V_GreenBar70.png\";","export default \"images/V_GreenBar80.png\";","export default \"images/V_GreenBar90.png\";","export default \"images/V_GreenBar100.png\";","import progressBar from \"./progressBar.js\"\n\n// contains money, and current build points for player throughout the game\nexport const playerPoints = {\n    community: 0,\n    production: 0,\n    resources: 0\n}\n\n// cORp stands for community or production\nexport const adjustPoints = (points, context, style = \"community\") => {\n\n    let fillPercentage; \n    switch(true){\n        case (points <= 42):\n            fillPercentage = 10;\n            break;\n        case (points > 42 && points <= 84):\n            fillPercentage = 20;\n            break;\n        case (points > 84 && points <= 126):\n            fillPercentage = 30;\n            break;\n        case (points > 126 && points <= 168):\n            fillPercentage = 40;\n            break;\n        case (points > 168 && points <= 210):\n            fillPercentage = 50;\n            break;\n        case (points > 210 && points <= 252):\n            fillPercentage = 60;\n            break;\n        case (points > 252 && points <= 294):\n            fillPercentage = 70;\n            break;\n        case (points > 294 && points <= 336):\n            fillPercentage = 80;\n            break;\n        case (points > 336 && points <= 378):\n            fillPercentage = 90;\n            break;\n        case (points > 378):\n            // debugger\n            fillPercentage = 100;\n            break\n        default:\n            break\n    }\n\n    if (style === \"community\"){\n        //save to variable because garbage collection\n        // debugger\n        const greenBar = new progressBar(context, -34, 105, \"green\", \"v\", fillPercentage);\n    } else {\n        // debugger\n        const blueBar = new progressBar(context, 590, 105, \"blue\", \"v\", fillPercentage);\n    }\n}\n\nexport const spawnResources = () => {\n    playerPoints.resources += 5;\n}\n\nexport const adjustResources = (num) => {\n    // debugger\n    playerPoints.resources += num;\n}\n\nexport const drawResourcesText = (context) => {\n    const startX = ((context.canvas.width / 2) - 102);\n    context.clearRect(startX, 478, (startX + 350), 30)\n\n    context.font = 'bold 30px Sans-Serif';\n    context.fillStyle = \"#66A1E7\"\n    // context.strokeStyle = \"#C5E0CF\";\n    context.strokeStyle = \"#55906F\";\n    context.fillText(\"Resources: \" + playerPoints.resources, startX, 500);\n    context.strokeText(\"Resources: \" + playerPoints.resources, startX, 500);\n    // requestAnimationFrame(drawResourcesText(context))\n\n  }","import {buildAssetPath} from \"./util\";\n\n//Community\nimport pyramid0 from \"../images/community/pyramids/00red_pyramid.png\";\nimport pyramid1 from \"../images/community/pyramids/01golden_pyramid.png\";\nimport pyramid2 from \"../images/community/pyramids/02light_pyramid.png\";\n\n//Production\nimport house0 from \"../images/production/houses/00shack.png\";\nimport house1 from \"../images/production/houses/01butcher.png\";\nimport house2 from \"../images/production/houses/02house.png\";\n\n\nexport const allSprites = {\n    \"pyramid0\": pyramid0,\n    \"pyramid1\": pyramid1,\n    \"pyramid2\": pyramid2,\n    \".\":\"production\",\n    \"house0\": house0,\n    \"house1\": house1,\n    \"house2\": house2\n}","export default \"images/00red_pyramid.png\";","export default \"images/01golden_pyramid.png\";","export default \"images/02light_pyramid.png\";","export default \"images/00shack.png\";","export default \"images/01butcher.png\";","export default \"images/02house.png\";","console.log(\"hello from canvas events\")\nimport AlienShip from \"./alien_ship\";\nimport MotherShip from \"./mothership\";\nimport {buildAssetPath} from \"./util\"\nimport {playerPoints, adjustPoints, adjustResources} from \"./pointsSystem\"\n\n//works\n// import pyramid0 from \"../images/community/pyramids/00red_pyramid.png\"\n// import pyramid1 from \"../images/community/pyramids/01golden_pyramid.png\"\n// import pyramid2 from \"../images/community/pyramids/02light_pyramid.png\"\n\nimport {allSprites} from \"./allSprites\"\n\n// import pyramid0 from \"../images/community/pyramids/01pyramid.svg\"\n\nimport grassD from \"../images/terrain_grass/grass_mix_d.jpg\"\n\n// //ex: [3,4]\nlet currentGrid = undefined;\n\n\n// function buildAssetPath(imgSrc) {\n//     return `./dist/${imgSrc}`;\n// }\n\n//This is a generic grass square preloaded with source path\nconst grassSquare = new Image()\ngrassSquare.src = buildAssetPath(grassD)\n\n// const playerPoints = {\n//     community: 0,\n//     production: 0,\n//     resources: 0\n// }\n\n// skeleton for onPlayerGrid\n//{isPresent: false, cORp: \"\", klass: \"\", level: null}\nconst onPlayerGrid = buildPlayerState()\n\n\n// console.log(onPlayerGrid)\n\n// This function builds an object containing all the coordinates of the play grid and \n// stores state of what the player has played\nfunction buildPlayerState(){\n    let buildPlayerGrid = {}\n    for(let i = 0 ; i < 4; i++){\n        buildPlayerGrid[i] = {}\n        for(let j = 0; j < 7; j++){\n\n            buildPlayerGrid[i][j] = {isPresent: false, cORp: \"\", klass: \"\", level: null}\n        }\n    }\n    return buildPlayerGrid\n}\n\n\n//skeleton\n//{file: \"\"\", name:\"\", cBoost: 10, pBoost: 0, community:\"\", klass:\"\", index:#}\nconst civilization = {\n        community: {\n                parks: [],\n                pyramids: [\n                    {file: buildAssetPath(allSprites[\"pyramid0\"]), name:\"redPyramid\", boost: 10, cORp: \"community\", klass:\"pyramids\", index:0 },\n                    {file: buildAssetPath(allSprites[\"pyramid1\"]), name:\"goldenPyramid\", boost: 20, cORp: \"community\", klass:\"pyramids\", index:1 },\n                    {file: buildAssetPath(allSprites[\"pyramid2\"]), name:\"lightPyramid\", boost: 30, cORp: \"community\", klass:\"pyramids\", index:2 }\n                \n                ],\n                ruins: [{}],\n                meditationCircles: [],\n                trees:[]\n                },\n        production: {\n                farms: [],\n                buildings: [],\n                houses: [\n                     {file: buildAssetPath(allSprites[\"house0\"]), name:\"shack\", boost: 15, cORp: \"production\", klass:\"houses\", index:0 },\n                     {file: buildAssetPath(allSprites[\"house1\"]), name:\"better\", boost: 25, cORp: \"production\", klass:\"houses\", index:1 },\n                     {file: buildAssetPath(allSprites[\"house2\"]), name:\"home\", boost: 35, cORp: \"production\", klass:\"houses\", index:2 }\n                ],\n                energy: {\n                        wind:[],\n                        solar:[],\n                        hydro:[]\n                }\n        }\n}\n\n\nexport const canvasEvents = (canvasHome, context) => {\n    //dropdown on right side\n    let menuContainer = document.getElementsByClassName(\"drop-down-container\")[0]\n    let menu = document.getElementsByClassName(\"civilization-menu\")[0]\n    const playerAlert = document.getElementsByClassName(\"playerAlert\")[0]\n    \n    //When user clicks on grid it sets currentGrid. If they click outside, it returns\n    // undefined\n    canvasHome.addEventListener('mousedown', (e) => {\n        currentGrid = getCoords(e);\n\n        if(currentGrid && Array.from(menuContainer.classList).includes(\"hidden\")){\n            //show dropdown if user clicks in playgrid\n            menuContainer.classList.toggle(\"hidden\")\n\n            const len = menu.options.length;\n            menu.setAttribute('size', len);\n\n        } else if (currentGrid === undefined && !Array.from(menuContainer.classList).includes(\"hidden\")) {\n            //hide dropdown if user clicks outside play grid            \n            menuContainer.classList.toggle(\"hidden\")\n        } \n        console.log(`currentGrid: ${currentGrid}`)\n    \n    })\n\n    // When user selects from the drop down menu to place a sprite\n    menu.addEventListener('change', () => {\n\n        console.log(\"resources\",playerPoints.resources)\n        // Remove error message if there is one\n        removePlayerAlert()\n\n        if (playerPoints.resources < 20){\n            playerAlert.appendChild(generateErrorAlert(\"Every building costs 20 resources ... !\"))\n            menu.selectedIndex = null; \n            return false\n        } \n        \n        //choiceStr is \"production,houses,0\"\n        const choiceStr = menu.options[menu.selectedIndex].value\n        // debugger\n        console.log(onPlayerGrid[currentGrid[0]][currentGrid[1]])\n        const okToRender = verifyBuildingMatch(choiceStr)\n        if(!okToRender) return false;\n        \n        //chosenBuilding is \\\n        //{isPresent: false, cORp: \"\", klass: \"\", level: null}\n        const chosenBuilding = civilizationMenuSelect(choiceStr)\n        const filePathBuild = chosenBuilding.file\n        \n        \n\n        //place sprite if not occupied\n        if(!isGridOccupied()){\n            \n            if (isInitialBuilding(chosenBuilding) === true){\n                parseImage(context, filePathBuild, currentGrid)\n                occupyGrid(chosenBuilding)\n                console.log(\"PAY UP\")\n                adjustResources(-20)\n\n                playerPoints[chosenBuilding.cORp] += chosenBuilding.boost\n                // debugger\n                adjustPoints(playerPoints[chosenBuilding.cORp], context, chosenBuilding.cORp)\n                // adjustPoints(playerPoints.community, context)\n                // adjustPoints(playerPoints.production, context, \"production\")\n            } else {\n                playerAlert.appendChild(generateErrorAlert(\"That building is not the first of it's kind!\"))\n            }\n        } else if (isGridOccupied()){\n             // Already a building on grid pos\n             const x = currentGrid[0];\n             const y = currentGrid[1];\n\n             const objAtGridPos = onPlayerGrid[x][y];\n            //  const maxIndexOfType = civilization[chosenBuilding.cORp][chosenBuilding.klass].length - 1\n\n            //  // Player tries to add the same building to the occupied grid\n            //  if (chosenBuilding.klass === objAtGridPos.klass && chosenBuilding.index === objAtGridPos.level\n            //     && maxIndexOfType != chosenBuilding.index){\n\n            //     playerAlert.appendChild(generateErrorAlert(\"That building is already there. Try upgrading!\"));\n\n            //  } else if (chosenBuilding.klass !== objAtGridPos.klass){\n            //     // Player tries to upgrade to a building of a different klass\n\n            //      playerAlert.appendChild(generateErrorAlert(\"Try upgrading that structure to a higher level!\"));\n            //  } else if (chosenBuilding.klass === objAtGridPos.klass) {\n            //     // building klass is a match\n                \n            //     // player has maxed out upgrade\n            //      if (maxIndexOfType === objAtGridPos.level){\n            //          playerAlert.appendChild(generateErrorAlert(\"Max upgrade achieved!\"));\n                //  } \n                //  else \n                 if (chosenBuilding.index === (objAtGridPos.level + 1)){\n                     // player upgrades appropriately by 1 level\n                     //re-render grass first && remove previous building\n                     console.log(\"DRAW!!!\")\n                     drawOnGrid(grassSquare, context, x, y, true)\n                     \n                     parseImage(context, filePathBuild, currentGrid)\n                     occupyGrid(chosenBuilding)\n                     console.log(\"PAY UP\")\n                    adjustResources(-20)\n                     playerPoints[chosenBuilding.cORp] += chosenBuilding.boost\n                 }\n                //   else if (chosenBuilding.index < objAtGridPos.level){\n                //      playerAlert.appendChild(generateErrorAlert(\"Try upgrading, we must not regret our past decisions\"));\n                //  }\n                 \n\n            //  }\n            \n\n         }\n\n\n        // reset default of dropdown\n            menu.selectedIndex = null\n            console.log(playerPoints)\n\n\n\n\n    })\n\n    const verifyBuildingMatch = (choiceStr) => {\n        const x = currentGrid[0]\n        const y = currentGrid[1]\n        // debugger\n\n        if(onPlayerGrid[x][y].isPresent === true){\n            debugger\n            let optionsArr = choiceStr.split(\",\")\n            let nextcORp = null\n            let nextKlass = null;\n            let nextIndex = null;\n            [nextcORp, nextKlass, nextIndex] = optionsArr;\n            nextIndex = parseInt(optionsArr[2])\n            \n            const objAtGridPos = onPlayerGrid[x][y]\n            const maxIndexOfType = civilization[nextcORp][nextKlass].length - 1\n            debugger\n            console.log(maxIndexOfType)\n            \n            debugger\n            if(objAtGridPos.cORp !== nextcORp || objAtGridPos.klass !== nextKlass){\n                playerAlert.appendChild(generateErrorAlert(\"Building types must match!\"))\n                return false;\n            } else if (nextKlass === objAtGridPos.klass && nextIndex === objAtGridPos.level\n                && maxIndexOfType != nextIndex){\n                // debugger\n                playerAlert.appendChild(generateErrorAlert(\"That building is already there. Try upgrading!\"));\n                return false\n             } else if (nextKlass === objAtGridPos.klass) {\n                // building klass is a match\n                \n                // player has maxed out upgrade\n                 if (maxIndexOfType === objAtGridPos.level){\n                     playerAlert.appendChild(generateErrorAlert(\"Max upgrade achieved!\"));\n                     return false;\n                 } else if (nextIndex < objAtGridPos.level){\n                     playerAlert.appendChild(generateErrorAlert(\"Try upgrading, we must not regret our past decisions\"));\n                     return false;\n                 }\n            }\n            // else if ()\n        }\n        return true\n    }\n\n    //Alert System\n    const removePlayerAlert = () => {\n         if (playerAlert.childElementCount > 0){\n            playerAlert.removeChild(playerAlert.childNodes[0]); \n        }\n    }\n\n    const generateErrorAlert = (errorMsg) => {\n        // Add Error message to the DOM -> \"That building is already there. Try upgrading!\"\n        const ele = document.createElement('p');\n\n        const text = document.createTextNode(errorMsg); \n        ele.appendChild(text)\n        ele.setAttribute('class', 'playerAlert');\n        return ele\n    }\n\n    // menuContainer.classList.toggle(\"shrink\")\n    // \n    // menuContainer.classList.toggle(\"hidden\")\n\n\n    \n    // console.log(canvasRect)\n   \n\n    // function onDown(e){\n    //         cx = e.pageX;\n    //         cy = e.pageY;\n    //     // console.log(`X: ${cx}, Y: ${cy}`)\n    // }\n    \n    const getCoords = (e) => {\n        let canvasRect = canvasHome.getBoundingClientRect();\n        let cx;\n        let cy;\n        let px = e.pageX;\n        let py = e.pageY;\n\n        cx = px - canvasRect.left\n        cy = py - canvasRect.top\n        console.log(canvasRect)\n\n        console.log(\"-------\")\n        console.log(cx)\n        console.log(cy)\n        const col = Math.floor((cx - 22) / 86) ;\n        const row = Math.floor((cy - 131) / 86) ;\n\n        // current location console.log\n        console.log(`X: [${row}, Y: ${col}]`)\n\n        //did click on game grid\n        if (row >= 0 && row <= 3 && col >= 0 && col <= 6){\n            return [row,col]\n        }\n        //did NOT click on game grid\n        else {\n            return undefined\n        }\n            \n    }\n\n    function seeGridOptions(row, col){\n        console.log(gameOptions[row][col])\n    }\n\n    function gridClick(row, col){\n\n\n    }\n\n}\n// selected argument is \"production,houses,0\"\nconst civilizationMenuSelect = (selected) => {\n        let optionsArr = selected.split(\",\")\n        let cORp = null\n        let klass = null;\n        let index = null;\n        [cORp, klass, index] = optionsArr;\n        console.log(\"--\")\n        // console.log(optionsArr);\n        // console.log(civilization[cORp][klass][index]);\n\n        return civilization[cORp][klass][index]\n    }\n\n//function will draw grass\nexport const drawGrass = (context) => {\n    let img1 = new Image()\n\n        img1.src = buildAssetPath(grassD)\n\n        img1.onload = () => {\n\n            drawRow(context, img1, 22, 131)\n            drawRow(context, img1, 22, 217)\n            drawRow(context, img1, 22, 303)\n            drawRow(context, img1, 22, 389)\n\n        }\n    \n\n    const drawRow = (context, image, rowX, rowY) => {\n        for(let i = 0; i < 7; i++){\n\n            // context.drawImage(image, rowX, rowY, image.width /11.9, image.height / 11.9 )\n            context.drawImage(image, rowX, rowY, 86, 86 )\n            // \n            rowX += 86\n        }\n    }\n}\n\nconst isGridOccupied = () => {\n    const x = currentGrid[0]\n    const y = currentGrid[1]\n\n    return onPlayerGrid[x][y].isPresent\n}\n\n//update gameState with chosen Building\nconst occupyGrid = (chosenBuilding) => {\n    const x = currentGrid[0]\n    const y = currentGrid[1]\n\n    onPlayerGrid[x][y].isPresent = true\n    onPlayerGrid[x][y].cORp = chosenBuilding.cORp\n    onPlayerGrid[x][y].klass = chosenBuilding.klass\n    onPlayerGrid[x][y].level = chosenBuilding.index\n\n    return onPlayerGrid[x][y]\n}\n\nconst isInitialBuilding = (chosenBuilding) => {\n    if (chosenBuilding.index === 0) return true;\n    return false\n}\n\n// to be MOVED LATER *!*!*!*!*!*!!*!*!*!*!*!*!*!*\nexport const summonAliens = (context) => {\n    const motherShip = new MotherShip(context)\n        motherShip.makeShips()\n        const intId1 = setInterval(motherShip.army[0].lToRAnimate, 150)\n        const intId2 = setInterval(motherShip.army[1].lToRAnimate, 150)\n        const intId3 = setInterval(motherShip.army[2].lToRAnimate, 150)\n\n\n        setTimeout(()=>clearInterval(intId1),2100)\n        setTimeout(()=>clearInterval(intId2),2100)\n        setTimeout(()=>clearInterval(intId3),2100)\n} \n\nconst parseImage = (context, filePath, currentGrid) =>{\n    let image = new Image();\n    image.src = filePath;\n\n    const x = currentGrid[0]\n    const y = currentGrid[1]\n\n\n    image.onload = () => {        \n        drawOnGrid(image, context, x, y)\n    }\n\n}\n\n// FN will draw an image at the appropriate spot on the grid\nconst drawOnGrid = (image, context, gridX, gridY, clearRectBoolean) => {\n    console.log(\"draw on grid\")\n        const offsetX = 22;\n        const offsetY = 131;\n        const topLeftX = 86;\n        const topLeftY = 86;    \n\n        if (gridX === 0 && gridY === 0) {\n            // context.drawImage(this.sprite, this.movements[this.moveIdx].x, this.movements[this.moveIdx].y, this.scaleW, this.scaleH )\n            //works and original func\n            // context.drawImage(image, offsetX, offsetY, image.width /11.9, image.height / 11.9 )\n            if (clearRectBoolean){\n                \n                context.clearRect(offsetX, offsetY, 86, 86)\n                context.drawImage(image, offsetX, offsetY, 86, 86)\n            } else {\n                context.drawImage(image, offsetX, offsetY, 86, 86 )\n            }\n        } else if (gridX === 0 && gridY > 0){\n            //original\n            // context.drawImage(image, ((topLeftX * gridY) + offsetX), offsetY, image.width /11.9, image.height / 11.9 )\n            if (clearRectBoolean){\n                \n                // context.clearRect(offsetX, offsetY, 86, 86)\n                // context.drawImage(image, offsetX, offsetY, 86, 86)\n                context.clearRect(((topLeftX * gridY) + offsetX), ((topLeftY * gridX) + offsetY), 86, 86)\n                context.drawImage(image, ((topLeftX * gridY) + offsetX), ((topLeftY * gridX) + offsetY), 86, 86 )\n            } else {\n                context.drawImage(image, ((topLeftX * gridY) + offsetX), offsetY, 86, 86 )\n            }\n        } else {\n            // \n             //original\n            // context.drawImage(image, ((topLeftX * gridY) + offsetX), offsetY, image.width /11.9, image.height / 11.9 )\n            if (clearRectBoolean){\n                \n                //original\n                // context.clearRect(offsetX, offsetY, 86, 86)\n                // context.drawImage(image, offsetX, offsetY, 86, 86)\n\n                context.clearRect(((topLeftX * gridY) + offsetX), ((topLeftY * gridX) + offsetY), 86, 86)\n                context.drawImage(image, ((topLeftX * gridY) + offsetX), ((topLeftY * gridX) + offsetY), 86, 86 )\n            } else {\n                context.drawImage(image, ((topLeftX * gridY) + offsetX), ((topLeftY * gridX) + offsetY), 86, 86 )\n            }\n        }\n\n    \n    }\n\n    // export const animateSquares = (image, cb) => {\n    //     context.clearRect(0, 0, 646, 505)\n    //     for(let i = 0; i < 4; i++){\n    //         for(let j = 0; j < 7; j++){\n    //             drawOnGrid(image, i, j)\n                \n    //         }\n    //     }\n\n    // }\n\n    // export const loadAlienShip = () => {\n    //     // const alienSrc = \"/src/images/aliens/ships/08-Netuno.png\";\n    //     // const alienShip = new Image();\n    //     // alienShip.src = alienSrc;\n\n    //     // alienShip.onload( () => {\n    //     //     return true\n    //     // })\n\n    // }\n\n\n\n// export default canvasEvents;\n\n\n\n","export default \"images/grass_mix_d.jpg\";","import {animateSquares,\n     canvasEvents,\n      drawGrass,\n       drawOnGrid,\n    summonAliens} from \"./scripts/canvas_events.js\"\nimport progressBar from \"./scripts/progressBar.js\"\nimport \"./styles/index.scss\";\n\nimport {drawResourcesText, spawnResources} from \"./scripts/pointsSystem\";\n\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () =>  {\n\n    const canvasHome = document.getElementById(\"canvas-home\");\n    const context = canvasHome.getContext('2d')\n\n    canvasEvents(canvasHome, context)\n    drawGrass(context)\n    //draw Production progress bar\n    // y is 375\n    // const blankLeft = new progressBar(context, -34, 125, \"blank\", \"v\")\n    const blankLeft = new progressBar(context, -34, 115, \"blank\", \"v\");\n    const blankRight = new progressBar(context, 590, 115, \"blank\", \"v\");\n    // debugger\n    const makeResourcesId = setInterval(() => {\n        spawnResources();\n        drawResourcesText(context);\n    }, 600)\n\n    setInterval(() => {\n        drawResourcesText(context);\n    }, 250)\n    // spawnResources();\n    // drawResourcesText(context);\n\n\n\n\n    // const greenBar = new progressBar(context, -34, 105, \"green\", \"v\", 10);\n    // const blueBar = new progressBar(context, 590, 105, \"blue\", \"v\", 20);\n    // const redBar = new progressBar(context, -34, 375, \"blue\", \"v\")\n\n    // const greenBar = new progressBar(context, -34, 105, \"green\", \"v\", 90);\n\n    // greenBar.increaseFill(100)\n\n    // const yellowBar = new progressBar(context, 590, 375, \"yellow\", \"v\")\n\n    //start points\n    // const yellowBar = new progressBar(context, 590, 445, \"yellow\", \"v\")\n    // const blueBar = new progressBar(context, 590, 105, \"blue\", \"v\", 20);\n    // productionBar.drawBar(context)\n    // productionBar.blankSprite.onload = () => {\n    //     \n    //     context.drawImage(productionBar.blankSprite, productionBar.startX, productionBar.startY);\n    //     context.drawImage(productionBar.colorSprite, productionBar.startX, productionBar.startY);\n    // }\n    // productionBar.increaseFill()\n    // progressBar(context, 626, 476, \"blue\")\n\n    // summonAliens(context)\n    \n\n    \n    // let choice = menu.options[menu.selectedIndex].value\n\n    // let imgTest = new Image();\n    \n    // imgTest.src = \"/src/images/terrain_grass/grass_mix_n.jpg\"\n\n    // imgTest.onload = () => {\n\n        // for(let i = 0; i < 7; i++){\n        //     for(let j = 0; j < 7; j++){\n                // drawOnGrid(imgTest, i, j)\n                // animateSquares(imgTest)\n\n\n        //     }\n        // }\n        // drawOnGrid(imgTest, 6)\n    // }\n\n    \n\n\n})\n\n    // let imgTest = new Image();\n    \n    // imgTest.src = \"/src/images/terrain_grass/grass_mix_n.jpg\"\n\n    // imgTest.onload = () => {\n\n    //     drawOnGrid(imgTest, 0, 5)\n    //     // drawOnGrid(imgTest, 6)\n    // }\n//  backgrounds()\n\n\n\n\n\n// const backgrounds = require(\"./scripts/backgrounds.js\")"],"sourceRoot":""}